#!/bin/sh

# This script allows the user to select one of the connected monitors
# and then it changes the laptop's touch input to map it onto that monitor

SETTINGS_VERBOSE=

WACOM="Wacom ISDv4 E6"
FINGER="$WACOM Finger"
PEN="$WACOM Pen Pen (0)"
ERASER="$WACOM Pen Eraser (0)"
PAD=

MATRIX="Coordinate Transformation Matrix"

get_devs2() {
    devs=$(xsetwacom list devices)
}

get_devs() {
    devs=$(xinput list --name-only | cat -b)
    devs_count=$(printf "%s\n" "$devs" | wc -l)
    printf "%s\n" "$devs"
    printf "Please select the devices in this order (separated by spaces): "
    printf "FINGER PEN ERASER PAD|0\n"
    printf "(enter nothing to cancel)\n"
    dev_ids=
    finger_id=
    pen_id=
    eraser_id=
    pad_id=
    while is_not_integer "$finger_id" || [ "$finger_id" -lt 1 ] ||
        [ "$finger_id" -gt "$devs_count" ] || is_not_integer "$pen_id" ||
        [ "$pen_id" -lt 1 ] || [ "$pen_id" -gt "$devs_count" ] ||
        is_not_integer "$eraser_id" || [ "$eraser_id" -lt 1 ] ||
        [ "$eraser_id" -gt "$devs_count" ] || is_not_integer "$pad_id" ||
        [ "$pad_id" -gt "$devs_count" ] || [ "$finger_id" -eq "$pen_id" ] ||
        [ "$finger_id" -eq "$eraser_id" ] || [ "$finger_id" -eq "$pad_id" ] ||
        [ "$pen_id" -eq "$eraser_id" ] || [ "$pen_id" -eq "$pad_id" ] ||
        [ "$eraser_id" -eq "$pad_id" ]; do
        printf "1-%d> " "$devs_count"
        read -r dev_ids
        [ -z "$dev_ids" ] && exit
        finger_id=$(printf "%s\n" "$dev_ids" | cut -d' ' -f1)
        pen_id=$(printf "%s\n" "$dev_ids" | cut -d' ' -f2)
        eraser_id=$(printf "%s\n" "$dev_ids" | cut -d' ' -f3)
        pad_id=$(printf "%s\n" "$dev_ids" | cut -d' ' -f4)
    done
    FINGER=$(xinput list --name-only | head -n"$finger_id" | tail -n1)
    PEN=$(xinput list --name-only | head -n"$pen_id" | tail -n1)
    ERASER=$(xinput list --name-only | head -n"$eraser_id" | tail -n1)
    [ "$pad_id" -gt 0 ] && PAD=$(xinput list --name-only | head -n"$pad_id" | tail -n1)
}

set_ctm() {
    xinput set-prop "$1" --type=float "$MATRIX" \
        "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "${10}"
}

reset_ctm() {
    set_ctm "$FINGER" 1 0 0 0 1 0 0 0 1
    set_ctm "$PEN" 1 0 0 0 1 0 0 0 1
    set_ctm "$ERASER" 1 0 0 0 1 0 0 0 1
    [ -n "$PAD" ] && set_ctm "$PAD" 1 0 0 0 1 0 0 0 1
}

is_not_integer() {
    case "$1" in
        ''|*[!0-9]*) return 0 ;;
        *) return 1 ;;
    esac
}

while [ -n "$1" ]; do
    case $1 in
        --reset)
            reset_ctm
            exit
            ;;
        -v|--verbose)
            SETTINGS_VERBOSE=1
            shift
            ;;
        *)
            ;;
    esac
done

get_devs
if [ -n "$SETTINGS_VERBOSE" ] && [ "$SETTINGS_VERBOSE" -ge 1 ]; then
    echo "FINGER is $FINGER"
    echo "PEN is $PEN"
    echo "ERASER is $ERASER"
    echo "PAD is $PAD"
fi


# format:
# monitor_name width height offset_x offset_y
monitors_info=$(xrandr --listactivemonitors |
    sed -r '1d; s_^.*:\s+\S+\s+([[:digit:]]+)/[[:digit:]]+x([[:digit:]]+)/[[:digit:]]+\+([[:digit:]]+)\+([[:digit:]]+)\s+(\S+)_\5 \1 \2 \3 \4_')

monitors_names=$(echo "$monitors_info" | cut -d' ' -f1)
monitors_dims=$(echo "$monitors_info" | cut -d' ' -f2-)

# Prompt user
echo "$monitors_names" | awk '{printf "(%d) %s\n", NR, $0}'
total_monitors=$(echo "$monitors_names" | wc -l)
mon_num=
while is_not_integer "$mon_num" || [ "$mon_num" -lt 1 ] || [ "$mon_num" -gt "$total_monitors" ]; do
    printf "Select a monitor (between 1 and %d) or 'a' for all: " "$total_monitors"
    read -r mon_num
    if [ -z "$mon_num" ]; then
        exit
    elif [ "$mon_num" = "a" ]; then
        echo "Resetting CTM..."
        reset_ctm
        exit
    fi
done

if [ -n "$SETTINGS_VERBOSE" ]; then
    printf "You selected %d (" "$mon_num"
    echo "$monitors_names" | sed -n "${mon_num}p" | tr -d "\n"
    printf "), dimensions: "
    echo "$monitors_dims" | sed -n "${mon_num}p"
fi

monitor_dims=$(echo "$monitors_dims" | sed -n "${mon_num}p")

TOUCH_WIDTH=$(echo "$monitor_dims" | cut -d' ' -f1)
TOUCH_HEIGHT=$(echo "$monitor_dims" | cut -d' ' -f2)
TOUCH_OFFSET_X=$(echo "$monitor_dims" | cut -d' ' -f3)
TOUCH_OFFSET_Y=$(echo "$monitor_dims" | cut -d' ' -f4)

if [ -n "$SETTINGS_VERBOSE" ]; then
    echo "width: $TOUCH_WIDTH"
    echo "height: $TOUCH_HEIGHT"
    echo "x offset: $TOUCH_OFFSET_X"
    echo "y offset: $TOUCH_OFFSET_Y"
fi

#TOUCH_WIDTH=1920
#TOUCH_HEIGHT=1080
#TOUCH_OFFSET_X=1366
#TOUCH_OFFSET_Y=0

totals=$(xrandr -q | head -n1 | cut -d, -f2 | cut -d' ' -f3,5)

TOTAL_WIDTH=${totals%% *}
TOTAL_HEIGHT=${totals##* }

c0=$(echo "$TOUCH_WIDTH/$TOTAL_WIDTH" | bc -l)
c1=$(echo "$TOUCH_OFFSET_X/$TOTAL_WIDTH" | bc -l)
c2=$(echo "$TOUCH_HEIGHT/$TOTAL_HEIGHT" | bc -l)
c3=$(echo "$TOUCH_OFFSET_Y/$TOTAL_HEIGHT" | bc -l)

F_EXISTS=0
P_EXISTS=0
E_EXISTS=0
PAD_EXISTS=0
xinput list | grep -q "$FINGER" && F_EXISTS=1
xinput list | grep -q "$PEN"    && P_EXISTS=1
xinput list | grep -q "$ERASER" && E_EXISTS=1
[ -n "$PAD" ] && xinput list | grep -q "$PAD" && PAD_EXISTS=1

[ "$F_EXISTS" -eq 1 ] && set_ctm "$FINGER" "$c0" 0 "$c1" 0 "$c2" "$c3" 0 0 1
[ "$P_EXISTS" -eq 1 ] && set_ctm "$PEN"    "$c0" 0 "$c1" 0 "$c2" "$c3" 0 0 1
[ "$E_EXISTS" -eq 1 ] && set_ctm "$ERASER" "$c0" 0 "$c1" 0 "$c2" "$c3" 0 0 1
[ "$PAD_EXISTS" -eq 1 ] && set_ctm "$PAD"  "$c0" 0 "$c1" 0 "$c2" "$c3" 0 0 1

[ "$F_EXISTS" -eq 0 ] && echo "Error: The finger device doesn't exist" >&2
[ "$P_EXISTS" -eq 0 ] && echo "Error: The pen device doesn't exist"    >&2
[ "$E_EXISTS" -eq 0 ] && echo "Error: The eraser device doesn't exist" >&2
